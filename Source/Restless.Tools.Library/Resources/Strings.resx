<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ArgumentNull_ValidateNull" xml:space="preserve">
    <value>The object ({0}) is not allowed to be null.</value>
    <comment>ArgumentNullException</comment>
  </data>
  <data name="ArgumentNull_ValidateNullOrEmpty" xml:space="preserve">
    <value>The string ({0}) is not allowed to be null or empty.</value>
    <comment>ArgumentNullException when string is null or empty</comment>
  </data>
  <data name="ArgumentOutOfRange_ValidateInteger" xml:space="preserve">
    <value>The value for {0} is out of range. Must be between {1} - {2}</value>
    <comment>ArgumentOutOfRangeException - integer ranges</comment>
  </data>
  <data name="Argument_ValidateArray" xml:space="preserve">
    <value>The array {0} must have a minimum length of {1}</value>
    <comment>ArgumentException - ValidateArray()</comment>
  </data>
  <data name="InvalidOperation_CannotOpenFile" xml:space="preserve">
    <value>Unable to open the specified file. Please make sure the path and file name is correct.</value>
  </data>
  <data name="InvalidOperation_ColumnDoesNotBelongToTable" xml:space="preserve">
    <value>The specifed column does not belong to the specified table</value>
  </data>
  <data name="InvalidOperation_DataRowMustBeTable" xml:space="preserve">
    <value>The row does not belong to the {0} table</value>
    <comment>Used when a data row does not belong to the specified table</comment>
  </data>
  <data name="InvalidOperation_DataRowTableMismatch" xml:space="preserve">
    <value>The data row does not belong to the table type that owns this object.</value>
  </data>
  <data name="InvalidOperation_DataTableNotRegistered" xml:space="preserve">
    <value>The specified data table has not been registered</value>
    <comment>Used when a data table is requested from the controller, but doesn't exist</comment>
  </data>
  <data name="InvalidOperation_EmptyDdl" xml:space="preserve">
    <value>The table returned an empty string for ddl creation</value>
  </data>
  <data name="InvalidOperation_FileDoesNotExist" xml:space="preserve">
    <value>The specified file does not exist</value>
  </data>
  <data name="InvalidOperation_HostAndDependentTablesSame" xml:space="preserve">
    <value>The host table and the dependent table cannot be the same.</value>
  </data>
  <data name="InvalidOperation_ImportFileDoesNotExist" xml:space="preserve">
    <value>The specified import file does not exist</value>
    <comment>Used when importing a sql file and it doesn't exist</comment>
  </data>
  <data name="InvalidOperation_NoSearchScopeSpecified" xml:space="preserve">
    <value>No search scope has been specified.</value>
  </data>
  <data name="InvalidOperation_OpenXmlReader" xml:space="preserve">
    <value>Cannot read the specified file. The file is not is the Open XML format.</value>
    <comment>Used with the OpenXML reader</comment>
  </data>
  <data name="InvalidOperation_TableIsReadOnly" xml:space="preserve">
    <value>Table is read only</value>
    <comment>Used when attempting an operation on a read only table</comment>
  </data>
  <data name="InvalidOperation_WhoisLookupTypeIsUnknown" xml:space="preserve">
    <value>The whois lookup type is unknown</value>
    <comment>Used when an invalid string is passed to the whois lookup and StrictMode is true</comment>
  </data>
  <data name="NotImplemented" xml:space="preserve">
    <value>This method is not implemented</value>
  </data>
  <data name="UnhandledExceptionCaption" xml:space="preserve">
    <value>Unhandled Exception</value>
  </data>
  <data name="UnhandledExceptionMessageFormat" xml:space="preserve">
    <value>An unhandled exception occurred.

{0}

The application will now attempt to shutdown gracefully.</value>
  </data>
  <data name="UnspecifiedName" xml:space="preserve">
    <value>(unspecified)</value>
    <comment>Used when the name passed to a validation routine is null or empty</comment>
  </data>
</root>